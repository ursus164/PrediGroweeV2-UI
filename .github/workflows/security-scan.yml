name: Frontend Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

# Permissions dla SARIF upload do GitHub Security tab
permissions:
  contents: read
  security-events: write

# Security Policy:
# - CRITICAL/HIGH CVE â†’ Pipeline FAILS (must fix)
# - MEDIUM/LOW CVE â†’ Warning only (reported to Security tab)
# - Infrastructure issues (Hadolint/Dockle) â†’ Info only (no block)

jobs:
  hadolint:
    name: Hadolint - Dockerfile Best Practices
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [Dockerfile.dev, Dockerfile.prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./${{ matrix.dockerfile }}
          # Nie blokuj builda na warnings - tylko raportuj
          no-fail: true

  dockerfile-lint:
    name: Dockle - Dockerfile Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [Dockerfile.dev, Dockerfile.prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for Dockle
        run: |
          docker build -f ${{ matrix.dockerfile }} -t frontend:${{ matrix.dockerfile }} .

      - name: Run Dockle
        uses: erzz/dockle-action@v1
        with:
          image: frontend:${{ matrix.dockerfile }}
          exit-code: 0
          exit-level: WARN
        continue-on-error: true

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run npm audit fix (dry-run)
        run: npm audit fix --dry-run
        continue-on-error: true

  trivy-scan-dev:
    name: Trivy Scan (Dev Image)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -f Dockerfile.dev -t frontend:dev .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: frontend:dev
          format: 'sarif'
          output: 'trivy-results-dev.sarif'
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: 15m

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: 'trivy-results-dev.sarif'

  trivy-scan-prod:
    name: Trivy Scan (Prod Image)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -f Dockerfile.prod -t frontend:prod .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: frontend:prod
          format: 'sarif'
          output: 'trivy-results-prod.sarif'
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: 15m

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: 'trivy-results-prod.sarif'

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build production image
        run: docker build -f Dockerfile.prod -t frontend:prod .

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: frontend:prod
          format: spdx-json
          output-file: sbom-frontend.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-frontend
          path: sbom-frontend.spdx.json

  grype-scan:
    name: Grype Vulnerability Scan
    runs-on: ubuntu-latest
    needs: sbom-generation
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom-frontend

      - name: Scan with Grype
        uses: anchore/scan-action@v3
        with:
          sbom: sbom-frontend.spdx.json
          fail-build: true
          severity-cutoff: high

  eslint-security:
    name: ESLint Security Plugin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install ESLint security plugin
        run: npm install --save-dev eslint-plugin-security

      - name: Run ESLint with security rules
        run: npx eslint . --ext .ts,.tsx,.js,.jsx
        continue-on-error: true

  secret-scan:
    name: Secret Detection (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dockerfile-lint, npm-audit, trivy-scan-dev, trivy-scan-prod, grype-scan, eslint-security, secret-scan]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## ðŸ”’ Frontend Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Completed Scans:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Dockerfile Security Lint (Dockle)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… NPM Dependencies Audit" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Container CVE Scan (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… SBOM Generation & Scan (Syft + Grype)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Code Security Lint (ESLint)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Secret Detection (Gitleaks)" >> $GITHUB_STEP_SUMMARY
