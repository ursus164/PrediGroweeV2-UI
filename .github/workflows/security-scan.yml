name: Frontend Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

# Permissions dla SARIF upload do GitHub Security tab
permissions:
  contents: read
  security-events: write
  actions: read

# Security Policy:
# - CRITICAL/HIGH CVE → Pipeline FAILS (must fix)
# - MEDIUM/LOW CVE → Warning only (reported to Security tab)
# - Infrastructure issues (Hadolint/Dockle) → Info only (no block)

jobs:
  hadolint:
    name: Hadolint - Dockerfile Best Practices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: [Dockerfile.dev, Dockerfile.prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./${{ matrix.dockerfile }}
          failure-threshold: style
          # Najbardziej strict: failuje na error > warning > info > style

  dockerfile-lint:
    name: Dockle - Dockerfile Security
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: [Dockerfile.dev, Dockerfile.prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for Dockle
        run: |
          docker build -f ${{ matrix.dockerfile }} -t frontend:${{ matrix.dockerfile }} .

      - name: Run Dockle
        uses: erzz/dockle-action@v1
        with:
          image: frontend:${{ matrix.dockerfile }}
          exit-code: 1
          failure-threshold: INFO
          accept-keys: CIS-DI-0010
          # CIS-DI-0010: Do not use ARG/ENV for secrets (false positive for URLs)
          # Najbardziej strict: failuje na FATAL > WARN > INFO

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run npm audit fix (dry-run)
        run: npm audit fix --dry-run
        continue-on-error: true

  trivy-scan-dev:
    name: Trivy Scan (Dev Image)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -f Dockerfile.dev -t frontend:dev .
        env:
          CI: true

      - name: Run Trivy vulnerability scanner (SARIF for Security tab)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: frontend:dev
          format: 'sarif'
          output: 'trivy-results-dev.sarif'
          exit-code: 0
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret'
          timeout: 15m

      - name: Run Trivy vulnerability scanner (Table for logs)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: frontend:dev
          format: 'table'
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret'
          timeout: 15m

      - name: Run Trivy vulnerability scanner (JSON for report - all severities)
        uses: aquasecurity/trivy-action@master
        if: success() || failure()
        with:
          image-ref: frontend:dev
          format: 'json'
          output: 'trivy-report-dev.json'
          exit-code: 0
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln,secret'
          timeout: 15m

      - name: Upload Trivy JSON Report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: trivy-report-dev
          path: trivy-report-dev.json

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: 'trivy-results-dev.sarif'

  trivy-scan-prod:
    name: Trivy Scan (Prod Image)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -f Dockerfile.prod -t frontend:prod .
        env:
          CI: true

      - name: Run Trivy vulnerability scanner (SARIF for Security tab)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: frontend:prod
          format: 'sarif'
          output: 'trivy-results-prod.sarif'
          exit-code: 0
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret'
          timeout: 15m

      - name: Run Trivy vulnerability scanner (Table for logs)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: frontend:prod
          format: 'table'
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret'
          timeout: 15m

      - name: Run Trivy vulnerability scanner (JSON for report - all severities)
        uses: aquasecurity/trivy-action@master
        if: success() || failure()
        with:
          image-ref: frontend:prod
          format: 'json'
          output: 'trivy-report-prod.json'
          exit-code: 0
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln,secret'
          timeout: 15m

      - name: Upload Trivy JSON Report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: trivy-report-prod
          path: trivy-report-prod.json

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: 'trivy-results-prod.sarif'

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build production image
        run: docker build -f Dockerfile.prod -t frontend:prod .

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: frontend:prod
          format: spdx-json
          output-file: sbom-frontend.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-frontend
          path: sbom-frontend.spdx.json

  grype-scan:
    name: Grype Vulnerability Scan
    runs-on: ubuntu-latest
    needs: sbom-generation
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom-frontend

      - name: Scan with Grype
        uses: anchore/scan-action@v3
        with:
          sbom: sbom-frontend.spdx.json
          fail-build: true
          severity-cutoff: high

  typescript-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run type-check

  eslint-security:
    name: ESLint Security Plugin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install ESLint security plugin
        run: npm install --save-dev eslint-plugin-security

      - name: Run ESLint with security rules
        run: npx eslint . --ext .ts,.tsx,.js,.jsx

  static-analysis-frontend:
    name: Frontend Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run full ESLint check
        id: eslint
        continue-on-error: true
        run: npm run lint -- --format=json --output-file=eslint-report.json

      - name: Run Prettier check
        id: prettier
        continue-on-error: true
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,scss}" 2>&1 | tee prettier-report.txt

      - name: Run Next.js build check
        id: build
        continue-on-error: true
        run: npm run build 2>&1 | tee build-report.txt
        env:
          CI: true
          SKIP_ENV_VALIDATION: true
          NEXT_PUBLIC_GOOGLE_CLIENT_ID: "dummy"
          NEXT_PUBLIC_AUTH_SERVICE_URL: "http://localhost:8080"
          NEXT_PUBLIC_QUIZ_SERVICE_URL: "http://localhost:8081"
          NEXT_PUBLIC_STATS_SERVICE_URL: "http://localhost:8082"
          NEXT_PUBLIC_IMAGES_SERVICE_URL: "http://localhost:8083"
          NEXT_PUBLIC_ADMIN_SERVICE_URL: "http://localhost:8084"
          AUTH_SERVICE_INTERNAL_URL: "http://auth:8080"
          NEXT_PUBLIC_RECAPTCHA_SITE_KEY: "dummy"

      - name: Generate Frontend Static Analysis Report
        if: success() || failure()
        run: |
          mkdir -p reports
          echo "# Frontend Static Analysis Report" > reports/frontend-static-analysis.md
          echo "" >> reports/frontend-static-analysis.md

          echo "## ESLint Results" >> reports/frontend-static-analysis.md
          if [ -f "eslint-report.json" ]; then
            cat eslint-report.json >> reports/frontend-static-analysis.md
          fi
          echo "" >> reports/frontend-static-analysis.md

          echo "## Prettier Results" >> reports/frontend-static-analysis.md
          if [ -f "prettier-report.txt" ]; then
            cat prettier-report.txt >> reports/frontend-static-analysis.md
          fi
          echo "" >> reports/frontend-static-analysis.md

          echo "## Build Results" >> reports/frontend-static-analysis.md
          if [ -f "build-report.txt" ]; then
            tail -100 build-report.txt >> reports/frontend-static-analysis.md
          fi

      - name: Upload Frontend Static Analysis Report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: frontend-static-analysis-report
          path: |
            reports/frontend-static-analysis.md
            eslint-report.json
            prettier-report.txt
            build-report.txt

      - name: Fail if any static analysis tool found issues
        if: steps.eslint.outcome == 'failure' || steps.prettier.outcome == 'failure' || steps.build.outcome == 'failure'
        run: |
          echo "Static analysis found issues:"
          echo "- ESLint: ${{ steps.eslint.outcome }}"
          echo "- Prettier: ${{ steps.prettier.outcome }}"
          echo "- Build: ${{ steps.build.outcome }}"
          exit 1

  secret-scan:
    name: Secret Detection (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-summary:
    name: Comprehensive Security Report
    runs-on: ubuntu-latest
    needs: [hadolint, dockerfile-lint, npm-audit, trivy-scan-dev, trivy-scan-prod, grype-scan, typescript-check, eslint-security, static-analysis-frontend, secret-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Security Report
        run: |
          echo "# PrediGroweeV2 Frontend - Security Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Trivy CVE Summary for dev and prod images
          echo "## Container Vulnerability Scan (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for image in dev prod; do
            if [ -f "artifacts/trivy-report-$image/trivy-report-$image.json" ]; then
              echo "### frontend:$image" >> $GITHUB_STEP_SUMMARY

              CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null || echo "0")
              HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null || echo "0")
              MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null || echo "0")
              LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null || echo "0")
              SECRETS=$(jq '[.Results[]?.Secrets[]?] | length' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null || echo "0")

              echo "**Vulnerabilities Found:**" >> $GITHUB_STEP_SUMMARY
              echo "- CRITICAL: $CRITICAL" >> $GITHUB_STEP_SUMMARY
              echo "- HIGH: $HIGH" >> $GITHUB_STEP_SUMMARY
              echo "- MEDIUM: $MEDIUM" >> $GITHUB_STEP_SUMMARY
              echo "- LOW: $LOW" >> $GITHUB_STEP_SUMMARY

              if [ "$SECRETS" -gt 0 ]; then
                echo "- Secrets Detected: $SECRETS" >> $GITHUB_STEP_SUMMARY
              fi

              # List critical CVEs with details
              if [ "$CRITICAL" -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "<details><summary>CRITICAL Vulnerabilities ($CRITICAL)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL") | "CVE: \(.VulnerabilityID)\nPackage: \(.PkgName) \(.InstalledVersion)\nFixed: \(.FixedVersion // "N/A")\nTitle: \(.Title)\n---"' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
              fi

              # List high CVEs with details
              if [ "$HIGH" -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "<details><summary>HIGH Vulnerabilities ($HIGH)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | "CVE: \(.VulnerabilityID)\nPackage: \(.PkgName) \(.InstalledVersion)\nFixed: \(.FixedVersion // "N/A")\nTitle: \(.Title)\n---"' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null | head -200 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
              fi

              # List medium CVEs with details
              if [ "$MEDIUM" -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "<details><summary>MEDIUM Vulnerabilities ($MEDIUM)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM") | "CVE: \(.VulnerabilityID)\nPackage: \(.PkgName) \(.InstalledVersion)\nFixed: \(.FixedVersion // "N/A")\nTitle: \(.Title)\n---"' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null | head -200 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
              fi

              # List low CVEs (collapsed by default, just count)
              if [ "$LOW" -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "<details><summary>LOW Vulnerabilities ($LOW)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW") | "CVE: \(.VulnerabilityID)\nPackage: \(.PkgName) \(.InstalledVersion)\nFixed: \(.FixedVersion // "N/A")\nTitle: \(.Title)\n---"' "artifacts/trivy-report-$image/trivy-report-$image.json" 2>/dev/null | head -100 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
              fi

              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Frontend Static Analysis Summary
          echo "## Frontend Static Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "artifacts/frontend-static-analysis-report/eslint-report.json" ]; then
            ESLINT_ERRORS=$(jq '[.[] | select(.errorCount > 0)] | length' "artifacts/frontend-static-analysis-report/eslint-report.json" 2>/dev/null || echo "0")
            ESLINT_WARNINGS=$(jq '[.[] | select(.warningCount > 0)] | length' "artifacts/frontend-static-analysis-report/eslint-report.json" 2>/dev/null || echo "0")

            if [ "$ESLINT_ERRORS" -gt 0 ] || [ "$ESLINT_WARNINGS" -gt 0 ]; then
              echo "**ESLint:** $ESLINT_ERRORS errors, $ESLINT_WARNINGS warnings" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details><summary>View ESLint Issues</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              jq -r '.[] | select(.errorCount > 0 or .warningCount > 0) | .messages[] | "\(.line):\(.column) - [\(.severity)] \(.message) (\(.ruleId))"' "artifacts/frontend-static-analysis-report/eslint-report.json" 2>/dev/null | head -100 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          if [ -f "artifacts/frontend-static-analysis-report/prettier-report.txt" ]; then
            PRETTIER_LINES=$(wc -l < "artifacts/frontend-static-analysis-report/prettier-report.txt" 2>/dev/null || echo "0")
            if [ "$PRETTIER_LINES" -gt 0 ]; then
              echo "**Prettier:** Formatting issues found" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details><summary>View Prettier Issues</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "artifacts/frontend-static-analysis-report/prettier-report.txt" | head -100 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          if [ -f "artifacts/frontend-static-analysis-report/build-report.txt" ]; then
            echo "**Build Check:** Completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>View Build Output</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -100 "artifacts/frontend-static-analysis-report/build-report.txt" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Summary Statistics
          echo "## Summary Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dockerfile Best Practices (Hadolint) | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Dockerfile Security (Dockle) | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript Type Check | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis (ESLint + Prettier + Build) | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Dependencies Audit | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Container CVE Scan (Trivy) | Completed (dev + prod) |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation & Scan (Grype) | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection (Gitleaks) | Completed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Detailed reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tip: Download artifacts to view full JSON/Markdown reports" >> $GITHUB_STEP_SUMMARY
